<?php

namespace App\Controller;

use App\Entity\Course;
use App\Entity\User;

use App\Form\CourseType;

use App\Repository\CourseCategoryRepository;
use App\Repository\CourseLevelRepository;
use App\Repository\CourseRepository;

use DateTime;
use Exception;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * Class AdminCourseController
 * @package App\Controller
 * @Route("/admin")
 */
class AdminCourseController extends AbstractController
{
    /**
     * @Route("/admin/course", name="admin_course")
     */
    public function index()
    {
        return $this->render('admin_course/admin.login.html.twig', [
            'controller_name' => 'AdminCourseController',
        ]);
    }

	//══════════════════════════════════════════════════════════════════════════════════════════════
	// Generated by php bin/console make:crud
	//══════════════════════════════════════════════════════════════════════════════════════════════

	// Affichage de la liste complete de’s cours’s.
	/**
	 * @Route("/courses/all-Course", name="admin_course_index", methods={"GET"})
	 * @param CourseCategoryRepository $courseCategoryRepository
	 * @param CourseRepository $courseRepository
	 * @param CourseLevelRepository $courseLevelRepository
	 * @return Response
	 */
	// public function courses() // Version du prof au départ.
	public function allCourseIndex(CourseCategoryRepository $courseCategoryRepository, CourseRepository $courseRepository, CourseLevelRepository $courseLevelRepository)
	{
		$this->denyAccessUnlessGranted(['ROLE_ADMIN', 'ROLE_SUPER_ADMIN']);

		$courses = $courseRepository->findBy(Array(), array('createdAt'=>'DESC'));
		$categories = $courseCategoryRepository->findAll();
		$levels = $courseLevelRepository->findAll();

		// Visibilité du cours.
		$_GET ['visibility'] = $_GET ['visibility'] ?? '';
		$_GET ['id'] = $_GET ['id'] ?? '';

		if($_GET['visibility'] <= 1 && $_GET['id'] != null) {
			$courseId = $courseRepository->find($_GET['id']);
			// var_dump($_GET['visibility']);exit;

			if ($_GET['visibility'] == 1) {

				// var_dump($_GET['visibility']);exit;
				$courseId->setIsPublished(1);

			} elseif ($_GET['visibility'] == 0) {

				// var_dump($_GET['visibility']);exit;
				$courseId->setIsPublished(0);
			}
			$entityManager = $this->getDoctrine()->getManager();
			$entityManager->persist($courseId);
			$entityManager->flush();

			// Message Flash
			$this->addFlash('course_visibility', $courseId->getIsPublished() == 0  ? 'Édition de visibilité caché réussi & accompli !' : 'Édition de visibilité affiché réussi & accompli !');
		}

		return $this->render('admin/course/course.index.html.twig', [
			'courses' => $courses,
			'categories' => $categories,
			'levels' => $levels
		]);
	}

	/**
	 * @Route("/courses/new", name="admin_course_new", methods={"GET","POST"})
	 * @param Request $request
	 * @return Response
	 * @throws Exception
	 */
	public function new(Request $request): Response
	{
		$this->denyAccessUnlessGranted(['ROLE_ADMIN', 'ROLE_SUPER_ADMIN']);

		$course = new Course();

		$form = $this->createForm(CourseType::class, $course);
		$form->handleRequest($request);

		if ($form->isSubmitted() && $form->isValid()) {

			if(empty($course->getImageFile())) $course->setImage('default.jpg');

			$now = new DateTime('now');

			$course->setCreatedAt($now);

			$this->getDoctrine()->getManager()->flush();

			$entityManager = $this->getDoctrine()->getManager();
			$entityManager->persist($course);
			$entityManager->flush();

			// Message Flash
			$this->addFlash('course_success', 'Édition réussi & accompli !');

			return $this->redirectToRoute('admin_course_index');
		}

		return $this->render('admin/course/course.new.html.twig', [
			'course' => $course,
			'form' => $form->createView(),
		]);
	}

	/**
	 * @Route("/course/{id}", name="admin_course_show", methods={"GET"})
	 * @param $id
	 * @param Course $course
	 * @param CourseCategoryRepository $CourseCategoryRepository
	 * @param CourseRepository $CourseRepository
	 * @param CourseLevelRepository $CourseLevelRepository
	 * @return Response
	 */
	public function show($id, Course $course, CourseCategoryRepository $CourseCategoryRepository, CourseRepository $CourseRepository, CourseLevelRepository $CourseLevelRepository): Response
	{

		$this->denyAccessUnlessGranted(['ROLE_ADMIN', 'ROLE_SUPER_ADMIN']);

		$categories = $CourseCategoryRepository->find($id);
		$levels = $CourseLevelRepository->find($id);

		return $this->render('admin/course/course.show.html.twig', [
			'course' => $course,
			'categories' => $categories,
			'levels' => $levels
		]);
	}

	/**
	 * @Route("/course/{id}/edit", name="admin_course_edit", methods={"GET","POST"})
	 * @param Request $request
	 * @param Course $course
	 * @return Response
	 */
	public function edit(Request $request, Course $course): Response
	{
		$this->denyAccessUnlessGranted(['ROLE_ADMIN', 'ROLE_SUPER_ADMIN']);

		// 2020‑01‑03 ‒ 22H49 : gestion de image.
		$imageFile = $course->getImage();

		$form = $this->createForm(CourseType::class, $course);
		$form->handleRequest($request);

		// Si image existe, la garder, sinon image par image défaut.
		if ($form->isSubmitted() && $form->isValid()) {

			if(!empty($course->getImage())) {

				$course->setImage($course->getImage());

			} elseif(empty($course->getImageFile())) {

				$course->setImage('default.jpg');
			}

			$this->getDoctrine()->getManager()->flush();

			// Message Flash
			$this->addFlash('course_success', 'Édition réussi & accompli !');

			return $this->redirectToRoute('admin_course_index');
		}

		return $this->render('admin/course/course.edit.html.twig', [
			'course' => $course,
			'form' => $form->createView(),
		]);
	}

	/**
	 * @Route("/admin/course/{id}", name="admin_course_delete", methods={"DELETE"})
	 * @param Request $request
	 * @param Course $course
	 * @return Response
	 */
	public function delete(Request $request, Course $course): Response
	{
		if ($this->isCsrfTokenValid('delete'.$course->getId(), $request->request->get('_token'))) {

			// Ajouter effacement de l'image si suppression du cours.

			$entityManager = $this->getDoctrine()->getManager();

			$entityManager->remove($course);

			$entityManager->flush();
		}

		// Message Flash
		$this->addFlash('course_danger', 'Cours supprimé !');

		return $this->redirectToRoute('admin_course_index');
	}
}
