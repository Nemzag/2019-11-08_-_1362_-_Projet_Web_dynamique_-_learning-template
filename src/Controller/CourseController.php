<?php
/*
 * Created by PhpStorm.
 * User: Nemzag aka Gaz‑mên Arifi (Shkypi, 1979-09-30).
 * Date: 2019-11-29
 * Time: 09h37
 * Updated:
*/

namespace App\Controller;

use App\Entity\Course;
use App\Entity\CourseCategory;
use App\Entity\CourseLevel;
use App\Form\CourseType;

use App\Repository\CourseCategoryRepository;
use App\Repository\CourseLevelRepository;
use App\Repository\CourseRepository;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

// Ancienne version.
/**
 * Class CourseController
 */
class CourseController extends AbstractController
{
	/**
	 * @Route("/courses", name="courses")
	 * @param CourseCategoryRepository $CourseCategoryRepository
	 * @param CourseRepository $CourseRepository
	 * @param CourseLevelRepository $CourseLevelRepository
	 * @return Response
	 */
	// public function courses() // Version du prof au départ.
	public function courses(CourseCategoryRepository $CourseCategoryRepository, CourseRepository $CourseRepository, CourseLevelRepository $CourseLevelRepository)
	{
		$courses = $CourseRepository->findAll();
		$categories = $CourseCategoryRepository->findAll();
		$levels = $CourseLevelRepository->findAll();

		return $this->render('course/courses.html.twig', [
			'courses' => $courses,
			'categories' => $categories,
			'levels' => $levels
		]);

		/*
		$courses = $repoCourse->findBy(
			['isPublished' => true],
			['name' => 'ASC']
		 );
		 $categories = $repoCategory->findBy(
			[],
			['name' => 'ASC']
		 );
		*/
	}

	// Créé le controleur Details.

	/**
	 * @Route("/courses/{id}", name="course_details")
	 * @param $id
	 * @return Response
	 */
	public function coursesDetails($id) {

		$course = $this
			->getDoctrine()
			->getRepository(Course::class )
			->find($id);

		$category = $this
			->getDoctrine()
			->getRepository(CourseCategory::class )
			->find($id);

		$level = $this
			->getDoctrine()
			->getRepository(CourseLevel::class )
			->find($id);

		return $this->render('course/details.html.twig',[
			/* Attention pash de double []
			['course' => $course],
			['category' => $category]);
			*/
			'course' => $course,
			'category' => $category,
			'level' => $level
		]);
	}

	// ────────────────────────────────────────────────────────────────────────
	// Generated by php bin/console make:crud
	/**
	 * @Route("/test/courses", name="course_index", methods={"GET"})
	 * @param CourseRepository $courseRepository
	 * @return Response
	 */
    public function index(CourseRepository $courseRepository): Response
    {
        return $this->render('admin/course/all-courses.html.twig', [
            'courses' => $courseRepository->findAll(),
        ]);
    }

	/**
	 * @Route("/test/courses/new", name="course_new", methods={"GET","POST"})
	 * @param Request $request
	 * @return Response
	 */
    public function new(Request $request): Response
    {
        $course = new Course();
        $form = $this->createForm(CourseType::class, $course);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($course);
            $entityManager->flush();

            return $this->redirectToRoute('course_index');
        }

        return $this->render('course/new.html.twig', [
            'course' => $course,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/test/course/{id}", name="course_show", methods={"GET"})
     */
    public function show(Course $course): Response
    {
        return $this->render('course/show.html.twig', [
            'course' => $course,
        ]);
    }

    /**
     * @Route("/test/course/{id}/edit", name="course_edit", methods={"GET","POST"})
     */
    public function edit(Request $request, Course $course): Response
    {
        $form = $this->createForm(CourseType::class, $course);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('course_index');
        }

        return $this->render('course/edit.html.twig', [
            'course' => $course,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/test/course/{id}", name="course_delete", methods={"DELETE"})
     */
    public function delete(Request $request, Course $course): Response
    {
        if ($this->isCsrfTokenValid('delete'.$course->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($course);
            $entityManager->flush();
        }

        return $this->redirectToRoute('course_index');
    }
}
