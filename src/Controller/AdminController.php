<?php
/*
 * Created by PhpStorm.
 * User: Nemzag aka Gaz‑mên Arifi (Shkypi, 1979-09-30) {https://github.com/Nemzag/}.
 * Date: 2019-11-27
 * Time: 22h51
 * Updated:
*/


namespace App\Controller;

use App\Entity\Course;
use App\Form\CourseType;
use App\Repository\CourseCategoryRepository;
use App\Repository\CourseLevelRepository;
use App\Repository\CourseRepository;
use Knp\Component\Pager\PaginatorInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * @Route("/admin")
 */
class AdminController extends AbstractController
{
	/**
	 * @Route("/", name="admin")
	 */
	public function adminHome() {

		$this->denyAccessUnlessGranted(['ROLE_ADMIN', 'ROLE_SUPER_ADMIN']);

		return $this->render('admin/index.html.twig', [
			/*
			'courses' => $courses,
			'categories' => $categories,
			'levels' => $levels
			*/
		]);
	}

	public function index(PaginatorInterface $paginator, Request $request)
	{

		$post = $this->getDoctrine()
			->getRepository(CourseController::class)
			->findAll();
		$pagination = $paginator->paginate(
			$post,
			$request->query->getInt('page', 1), 5);
		return $this->render('post/index.html.twig', [
			'posts' => $pagination]);
	}

	//══════════════════════════════════════════════════════════════════════════════════════════════
	// Generated by php bin/console make:crud
	//══════════════════════════════════════════════════════════════════════════════════════════════

	// Affichage de la liste complete de’s cours’s.
	/**
	 * @Route("/courses/all-Course", name="course_index", methods={"GET"})
	 * @param CourseCategoryRepository $CourseCategoryRepository
	 * @param CourseRepository $CourseRepository
	 * @param CourseLevelRepository $CourseLevelRepository
	 * @return Response
	 */
	// public function courses() // Version du prof au départ.
	public function allCourseIndex(CourseCategoryRepository $CourseCategoryRepository, CourseRepository $CourseRepository, CourseLevelRepository $CourseLevelRepository)
	{
		$this->denyAccessUnlessGranted(['ROLE_ADMIN', 'ROLE_SUPER_ADMIN']);

		$courses = $CourseRepository->findAll();
		$categories = $CourseCategoryRepository->findAll();
		$levels = $CourseLevelRepository->findAll();

		// Visibilité du cours.
		$_GET ['visibility'] = $_GET ['visibility'] ?? '';
		$_GET ['id'] = $_GET ['id'] ?? '';

		if($_GET['visibility'] <= 1 && $_GET['id'] != null) {
			$courseId = $CourseRepository->find($_GET['id']);
			// var_dump($_GET['visibility']);exit;

			if ($_GET['visibility'] == 1) {

				// var_dump($_GET['visibility']);exit;
				$courseId->setIsPublished(1);

			} elseif ($_GET['visibility'] == 0) {

				// var_dump($_GET['visibility']);exit;
				$courseId->setIsPublished(0);
			}
			$entityManager = $this->getDoctrine()->getManager();
			$entityManager->persist($courseId);
			$entityManager->flush();
		}

		return $this->render('admin/course/course.index.html.twig', [
			'courses' => $courses,
			'categories' => $categories,
			'levels' => $levels
		]);
	}

	/**
	 * @Route("/courses/new", name="course_new", methods={"GET","POST"})
	 * @param Request $request
	 * @return Response
	 */
	public function new(Request $request): Response
	{
		$this->denyAccessUnlessGranted(['ROLE_ADMIN', 'ROLE_SUPER_ADMIN']);

		$course = new Course();
		$form = $this->createForm(CourseType::class, $course);
		$form->handleRequest($request);

		if ($form->isSubmitted() && $form->isValid()) {
			$entityManager = $this->getDoctrine()->getManager();
			$entityManager->persist($course);
			$entityManager->flush();

			return $this->redirectToRoute('course_index');
		}

		return $this->render('admin/course/course.new.html.twig', [
			'course' => $course,
			'form' => $form->createView(),
		]);
	}

	/**
	 * @Route("/course/{id}", name="course_show", methods={"GET"})
	 * @param $id
	 * @param Course $course
	 * @param CourseCategoryRepository $CourseCategoryRepository
	 * @param CourseRepository $CourseRepository
	 * @param CourseLevelRepository $CourseLevelRepository
	 * @return Response
	 */
	public function show($id, Course $course, CourseCategoryRepository $CourseCategoryRepository, CourseRepository $CourseRepository, CourseLevelRepository $CourseLevelRepository): Response
	{

		$this->denyAccessUnlessGranted(['ROLE_ADMIN', 'ROLE_SUPER_ADMIN']);

		$categories = $CourseCategoryRepository->find($id);
		$levels = $CourseLevelRepository->find($id);

		return $this->render('admin/course/course.show.html.twig', [
			'course' => $course,
			'categories' => $categories,
			'levels' => $levels
		]);
	}

	/**
	 * @Route("/course/{id}/edit", name="course_edit", methods={"GET","POST"})
	 * @param Request $request
	 * @param Course $course
	 * @return Response
	 */
	public function edit(Request $request, Course $course): Response
	{
		$this->denyAccessUnlessGranted(['ROLE_ADMIN', 'ROLE_SUPER_ADMIN']);

		$form = $this->createForm(CourseType::class, $course);
		$form->handleRequest($request);

		if ($form->isSubmitted() && $form->isValid()) {
			$this->getDoctrine()->getManager()->flush();

			return $this->redirectToRoute('course_index');
		}

		return $this->render('admin/course/course.edit.html.twig', [
			'course' => $course,
			'form' => $form->createView(),
		]);
	}

	/**
	 * @Route("/admin/course/{id}", name="course_delete", methods={"DELETE"})
	 */
	public function delete(Request $request, Course $course): Response
	{
		if ($this->isCsrfTokenValid('delete'.$course->getId(), $request->request->get('_token'))) {
			$entityManager = $this->getDoctrine()->getManager();
			$entityManager->remove($course);
			$entityManager->flush();
		}

		return $this->redirectToRoute('course_index');
	}
}